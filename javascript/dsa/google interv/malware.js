//Couldnt get this running because of ..indexOf isnt functioning

class DSU{//disjoint set union
    constructor(size, components){ // what are we initializing this disjoint set with
        this.components = components||Array(size).fill(-1)

    }
    //find the parent of the node
    find(node){
        if(this.components[node] < 0){ //recurse until we reach a negative
            return node
        }
        return this.find(this.components[node])
    }
    union(node1, node2){
        const parentNode1 = this.find(node1)
        const parentNode2 = this.find(node2)

        if(parentNode1 !== parentNode2){
            const sizeOfNode2Component = this.components[parentNode2]//the node value will tell us the size
            this.components[parentNode1] += sizeOfNode2Component
            this.components[parentNode2] = parentNode1// now its attached to node1
        }

    }
}
function minimizeMalwareSpread(network, initiallyInfected){
    const networkSize = network.length
    const networkDSU = new DSU(networkSize)
    //adding our clean node to the Dsu

    for (let i = 0; i < networkSize; i++){
        
        
        if(initiallyInfected.indexOf(i) > -1) continue //continue; not break out of the forloop, but just skip nxt iter..
        //so if we are at 0, it will skip to 1
        const connections = network[i]
        for(let j = 0; j < connections.length; j++){ //looping tru the first array of network
            // we wanna call union between i & j but only if i is not in the initially infcted lists
            if(initiallyInfected.indexOf(j) > -1) continue     //skip to the next connction, if its infected
            //to the next array,
            if(connections[j]) { //returns truthy or falsy, if truthy:
                networkDSU.union(i,j) //connect all of the clean nodes
            }
        }
        
    }

    console.log(`this is the clean state ${networkDSU.components}`)
    const cleanState = networkDSU.components
    let worseSize = 0
    let worseNode = null
    for ( let i = 0; i< initiallyInfected.length; i++ ) { 
        const freshDSU = new DSU(networkSize, cleanState)
        const infectedNode = initiallyInfected[i]
        const connections = network[infectedNode]

        for (let j = 0; j< infectedNode.length; j++){
            if(initiallyInfected.indexOf(j) > -1) continue
            if(connections[j]){
                freshDSU.union(infectedNode, j) // this is just adding each infected node and creating a union btw them
            }
        }
        
        console.log(`after infecting the network with ${infectedNode}`, freshDSU.components)
        if(freshDSU.components[infectedNode] < worseSize){
            worseNode = infectedNode 
        }
        //check size of the component from the infected node
        // line 2n3 lets make a variable for worse case, we want to know which infectednode has more components
        
        worseSize = Math.min(worseSize, freshDSU.components[infectedNode]) 

        // at this point we gonna see if the infected node has comoponents, returns -1 if not
        //so we wanna take the worseSize and the size of the new value of infected node
        console.log(worseSize)
    }

    return worseNode
}
/*adjacency matrix, where we have each nodes and the conection to other nodes (network) and also the second array shows
list of infected node ([0, 1])*/
//console.log(minimizeMalwareSpread([[0, 1, 0], [1, 0, 1], [0, 1, 0]], [0, 1])) 
//console.log(minimizeMalwareSpread([[0, 1, 1], [1, 0, 0], [1, 0, 0]], [0, 1]))
console.log(minimizeMalwareSpread([[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]], [0, 1]))

// above is the state of the network when there are no malware in it
/*const testing = new DSU(10)


testing.union(2, 3)
console.log(testing.components)
console.log(testing.find(3))*/